# .github/workflows/deploy.yml
name: Deploy fba-frontend to VPS

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

env:
  # Docker Hub or GitHub Container Registry configuration
  REGISTRY: docker.io # Use 'ghcr.io' for GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }} # e.g., 'your-github-user/your-repo-name'

jobs:
  build_and_push_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_to_vps:
    runs-on: ubuntu-latest
    needs: build_and_push_image
    steps:
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v1.0.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            APP_DIR="/home/${{ secrets.VPS_USER }}/fba-frontend"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            
            echo "${{ secrets.ENV_PRODUCTION }}" > .env
            
            # Use the full image name with registry
            docker compose pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            docker compose down
            docker compose up -d --remove-orphans
            
            docker image prune -af --filter "until=24h"